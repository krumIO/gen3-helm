# Default values for wts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- (map) Global configuration options.
global:
  # -- (map) AWS configuration
  aws:
    # -- (bool) Set to true if deploying to AWS. Controls ingress annotations.
    enabled: false
    # -- (string) Credentials for AWS stuff.
    awsAccessKeyId:
    # -- (string) Credentials for AWS stuff.
    awsSecretAccessKey:
  # -- (bool) Whether the deployment is for development purposes.
  dev: true
  # -- (map) Postgres database configuration.
  postgres:
    # -- (bool) Whether the database should be created.
    dbCreate: true
    # -- (map) Master credentials to postgres. This is going to be the default postgres server being used for each service, unless each service specifies their own postgres
    master:
      # -- (string) hostname of postgres server
      host:
      # -- (string) username of superuser in postgres. This is used to create or restore databases
      username: postgres
      # -- (string) password for superuser in postgres. This is used to create or restore databases
      password:
      # -- (string) Port for Postgres.
      port: "5432"
  # -- (string) Environment name. This should be the same as vpcname if you're doing an AWS deployment. Currently this is being used to share ALB's if you have multiple namespaces. Might be used other places too.
  environment: default
  # -- (string) Hostname for the deployment.
  hostname: localhost
  # -- (string) ARN of the reverse proxy certificate.
  revproxyArn: arn:aws:acm:us-east-1:123456:certificate
  # -- (string) URL of the data dictionary.
  dictionaryUrl: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
  # -- (string) Portal application name.
  portalApp: gitops
  # -- (string) S3 bucket name for Kubernetes manifest files.
  kubeBucket: kube-gen3
  # -- (string) S3 bucket name for log files.
  logsBucket: logs-gen3
  # -- (bool) Whether to sync data from dbGaP.
  syncFromDbgap: false
  # -- (string) Path to the user.yaml file in S3.
  userYamlS3Path: s3://cdis-gen3-users/test/user.yaml
  # -- (bool) Whether public datasets are enabled.
  publicDataSets: true
  # -- (string) Access level for tiers.
  tierAccessLevel: libre
  # -- (bool) Whether network policies are enabled.
  netPolicy: true
  # -- (int) Number of dispatcher jobs.
  dispatcherJobNum: 10
  # -- (bool) Whether Datadog is enabled.
  ddEnabled: false

# -- (map) Postgres database configuration. If db does not exist in postgres cluster and dbCreate is set ot true then these databases will be created for you
postgres:
  # (bool) Whether the database should be restored from s3. Default to global.postgres.dbRestore
  dbRestore: false
  # -- (bool) Whether the database should be created. Default to global.postgres.dbCreate
  dbCreate:
  # -- (string) Hostname for postgres server. This is a service override, defaults to global.postgres.host
  host:
  # -- (string) Database name for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  database:
  # -- (string) Username for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  username:
  # -- (string) Port for Postgres.
  port: "5432"
  # -- (string) Password for Postgres. Will be autogenerated if left empty.
  password:

replicaCount: 1

image:
  repository: quay.io/cdis/workspace-token-service
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "feat_wts_internalfence"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

hostname:
oidc_client_id:
oidc_client_secret:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podLabels:
  release: production
  public: "yes"
  netnolimit: "yes"
  userhelper: "yes"
  tags.datadoghq.com/service: "token-service"


podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


service:
  type: ClusterIP
  httpPort: 80
  httpsPort: 443

resources:
  requests:
    cpu: 0.1
    memory: 12Mi
  limits:
    cpu: 0.5
    memory: 512Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

roleName: workspace-token-service

release: production

secrets:
  external_oidc:
    # - base_url:
    #   oidc_client_id:
    #   oidc_client_secret:
    #   login_options:
    #     example-google-login:
    #       name:
    #       params:
    #         idp:

  # wts-g3auto:
  #   appcreds.json: |
  #     {
  #       "wts_base_url": "https://HOSTNAME.REPLACE/wts/",
  #       "encryption_key": "ENCRYPTION KEY HERE",
  #       "secret_key": "SECRET KEY HERE",
  #       "fence_base_url": "https://HOSTNAME.REPLACE/user/",
  #       "oidc_client_id": "OIDC_CLIENT_ID.REPLACE",
  #       "oidc_client_sucrut": "OIDC_CLIENT_SECRET.REPLACE",
  #       "external_oidc": []
  #     }
  #   dbcreds.json: |
  #     {
  #       "db_host": "FENCE_DB_HOST.REPLACE",
  #       "db_username": "wts_default",
  #       "db_passwurd": "WTS_DB_PWD.REPLACE",
  #       "db_database": "wts_default"
  #     }
